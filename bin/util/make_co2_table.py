#!/usr/bin/env python3

""" Generate tables for CO2 fluid properties.

The tables are generated using the NIST (National Institute of Standards
and Techlology) Standard Reference Database Number 69
(https://doi.org/10.18434/T4D303).

Copyright for NIST Standard Reference Data is governed by the Standard
Reference Data Act (https://www.nist.gov/srd/public-law).

The values are calculated using the equation of Span and Wagner. Therefore,
the maximum pressure limit is the lowest of the following values:
* 800.0000 MPa
* The pressure at which a density of 1178.5 kg/m3 is reached.

NIST uses the IIR Convention to define the reference state for the enthalpy.
Therefore the enthalpy is set to 200000 J/kg at 0Â°C for saturated liquid.
Since this is not the reference state used in dumux, a modification of the
enthalpy values is necessary. NIST can provides also data according to other
reference states (NBP and ASHRAE).
"""

import argparse
import urllib
import requests
import numpy as np
from io import StringIO
from string import Template


parser = argparse.ArgumentParser(
    description='This script generates tables for CO2 fluid properties \n'
                '(density and enthalpy) using the equation of Span and Wagner.\n'
)
parser.add_argument('-t1', '--min_temp', required=True, type=float,
                    help='The minimum temperature in Kelvin.')
parser.add_argument('-t2', '--max_temp', required=True, type=float,
                    help='The maximum temperature in Kelvin.')
parser.add_argument('-nt', '--n_temp', required=True, type=int,
                    help='The number of temperature sampling points.'
                         'min_temp ist the first sampling point, max_temp the last.')
parser.add_argument('-p1', '--min_press', required=True, type=float,
                    help='The minimum pressure in Pascal.')
parser.add_argument('-p2', '--max_press', required=True, type=float,
                    help='The maximum pressure in Pascal.')
parser.add_argument('-np', '--n_press', required=True, type=int,
                    help='The number of pressure sampling points.'
                         'min_press ist the first sampling point, max_press the last.')
cmdArgs = vars(parser.parse_args())

delta_temperature = (cmdArgs["max_temp"] - cmdArgs["min_temp"]) / (cmdArgs["n_temp"] - 1)
delta_pressure = (cmdArgs["max_press"] - cmdArgs["min_press"]) / (cmdArgs["n_press"] - 1)

density_str = []
enthalpy_str = []

# get the data
for i in range(cmdArgs["n_temp"]):
    temperature = cmdArgs["min_temp"] + i * delta_temperature
    query = {'Action': 'Data', 'Wide': 'on', 'ID': 'C124389', 'Type': 'IsoTherm',
             'Digits': '12', 'PLow': str(cmdArgs["min_press"]), 'PHigh': str(cmdArgs["max_press"]),
             'PInc': str(delta_pressure), 'T': str(temperature), 'RefState': 'DEF',
             'TUnit': 'K', 'PUnit': 'Pa', 'DUnit': 'kg/m3', 'HUnit': 'kJ/kg',
             'WUnit': 'm/s', 'VisUnit': 'uPas', 'STUnit': 'N/m'}
    response = requests.get('https://webbook.nist.gov/cgi/fluid.cgi?'
                            + urllib.parse.urlencode(query))
    response.encoding = 'utf-8'
    text = response.text
    phase = np.genfromtxt(StringIO(text), delimiter='\t', dtype=str, usecols=[-1],
                          skip_header=1)
    values = np.genfromtxt(StringIO(text), delimiter='\t', names=True)

    # NIST provides additional samples at the transition points (if there is a
    # phase transition within the requested data range). Since the code which
    # uses the tables generated by this script cant deal with this additional
    # sample points, they are removed.
    phase_boundary_indices = []
    for i in range(1, len(phase)-1):
        if phase[i] != phase[i+1]:
            phase_boundary_indices.append(i)
            phase_boundary_indices.append(i+1)
    density = np.delete(values["Density_kgm3"], phase_boundary_indices)
    enthalpy = np.delete(values["Enthalpy_kJkg"], phase_boundary_indices)
    # transform unit (kJ/kg -> J/kg)
    enthalpy *= 1000
    # transform to the reference state used in dumux
    enthalpy -= 484870
    # format the data
    density_str.append('    {'+', '.join([format(x, '.12e') for x in density])+'}')
    enthalpy_str.append('    {'+', '.join([format(x, '.12e') for x in enthalpy])+'}')
density_str = ',\n'.join(density_str)
enthalpy_str = ',\n'.join(enthalpy_str)

# write the table by filling the gaps in the template
template = Template(open("co2values_template.inc", 'r').read())
replacements = {"MIN_TEMP": format(cmdArgs["min_temp"]),
                "MAX_TEMP": format(cmdArgs["max_temp"]),
                "NUM_TEMP_SAMPLES": format(cmdArgs["n_temp"]),
                "MIN_PRESS": format(cmdArgs["min_press"]),
                "MAX_PRESS": format(cmdArgs["max_press"]),
                "NUM_PRESS_SAMPLES": format(cmdArgs["n_press"]),
                "DENSITY_VALS": density_str,
                "ENTHALPY_VALS": enthalpy_str}

with open("co2values.inc", 'w') as tables:
    tables.write(template.substitute(replacements))
